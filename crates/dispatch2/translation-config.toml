framework = "Dispatch"
crate = "dispatch2"
required-crates = ["bitflags"]
link = false
modulemap = "usr/include/dispatch.modulemap"
is-library = true
custom-lib-rs = true

macos = "10.0"
maccatalyst = "13.0"
ios = "8.0"
tvos = "9.0"
watchos = "2.0"
visionos = "1.0"
gnustep = true

# Needs os_workgroup_t
fn.dispatch_workloop_set_os_workgroup.skipped = true

# Needs va_list, and deprecated anyhow.
fn.dispatch_debug.skipped = true
fn.dispatch_debugv.skipped = true

# Actually enums
# FIXME: Update the source to make these enums too.
typedef.dispatch_queue_priority_t.skipped = true
typedef.dispatch_source_mach_send_flags_t.skipped = true
typedef.dispatch_source_mach_recv_flags_t.skipped = true
typedef.dispatch_source_memorypressure_flags_t.skipped = true
typedef.dispatch_source_proc_flags_t.skipped = true
typedef.dispatch_source_vnode_flags_t.skipped = true
typedef.dispatch_source_timer_flags_t.skipped = true
typedef.dispatch_io_type_t.skipped = true
typedef.dispatch_io_close_flags_t.skipped = true
typedef.dispatch_io_interval_flags_t.skipped = true
# Lonely enum constant that we want to tie to dispatch_time_t
const.DISPATCH_WALLTIME_NOW.skipped = true

# `dispatch_object_t` is a special union that declares all the different kinds
# of dispatch objects, but that won't work in Rust.
union.dispatch_object_t.skipped = true
typedef.dispatch_object_t.skipped = true
protocol.OS_dispatch_object.skipped = true

# We want to implement TryFrom on this
typedef.dispatch_time_t.skipped = true

# Marked as noreturn, but header-translator doesn't handle that yet.
fn.dispatch_main.skipped = true

# Nullability is not yet properly tracked on uses of this.
#
# Furthermore, it should be `extern "C"` to get better error messages
# on unwinding.
typedef.dispatch_function_t.skipped = true

# The libc definition is unsound (?)
typedef.dispatch_qos_class_t.skipped = true

# We custom-define these instead.
typedef.dispatch_queue_t.skipped = true
protocol.OS_dispatch_queue.skipped = true
typedef.dispatch_queue_global_t.skipped = true
protocol.OS_dispatch_queue_global.skipped = true
typedef.dispatch_queue_serial_executor_t.skipped = true
protocol.OS_dispatch_queue_serial_executor.skipped = true
typedef.dispatch_queue_serial_t.skipped = true
protocol.OS_dispatch_queue_serial.skipped = true
typedef.dispatch_queue_main_t.skipped = true
protocol.OS_dispatch_queue_main.skipped = true
typedef.dispatch_queue_concurrent_t.skipped = true
protocol.OS_dispatch_queue_concurrent.skipped = true
typedef.dispatch_queue_attr_t.skipped = true
protocol.OS_dispatch_queue_attr.skipped = true
typedef.dispatch_source_t.skipped = true
protocol.OS_dispatch_source.skipped = true
typedef.dispatch_group_t.skipped = true
protocol.OS_dispatch_group.skipped = true
typedef.dispatch_semaphore_t.skipped = true
protocol.OS_dispatch_semaphore.skipped = true
typedef.dispatch_data_t.skipped = true
protocol.OS_dispatch_data.skipped = true
typedef.dispatch_io_t.skipped = true
protocol.OS_dispatch_io.skipped = true
typedef.dispatch_workloop_t.skipped = true
protocol.OS_dispatch_workloop.skipped = true

# Rename typedefs to match Swift naming scheme.
typedef.dispatch_queue_t.renamed = "DispatchQueue"
typedef.dispatch_queue_global_t.renamed = "DispatchQueue" # For now
typedef.dispatch_queue_serial_executor_t.renamed = "DispatchQueue" # For now
typedef.dispatch_queue_serial_t.renamed = "DispatchQueue" # For now
typedef.dispatch_queue_main_t.renamed = "DispatchQueue" # For now
typedef.dispatch_queue_concurrent_t.renamed = "DispatchQueue" # For now
typedef.dispatch_queue_attr_t.renamed = "DispatchQueueAttr"
typedef.dispatch_source_t.renamed = "DispatchSource"
typedef.dispatch_group_t.renamed = "DispatchGroup"
typedef.dispatch_semaphore_t.renamed = "DispatchSemaphore"
typedef.dispatch_data_t.renamed = "DispatchData"
typedef.dispatch_io_t.renamed = "DispatchIO"
typedef.dispatch_workloop_t.renamed = "DispatchWorkloop"

# Dispatch sources types should perhaps be mapped as a trait,
# similar to what Swift does for `DispatchSourceProtocol`?
struct.dispatch_source_type_s.skipped = true
typedef.dispatch_source_type_t.skipped = true

# Inline, defined manually for now
fn.dispatch_get_main_queue.skipped = true

# Fast paths for dispatch_once, done manually
fn._dispatch_once.skipped = true
fn._dispatch_once_f.skipped = true

# Inline helper for validating before retain/release,
# probably undesirable for our case.
fn._dispatch_object_validate.skipped = true

# Fake functions that are actually macros
fn.dispatch_wait.skipped = true
fn.dispatch_notify.skipped = true
fn.dispatch_cancel.skipped = true
fn.dispatch_testcancel.skipped = true

# TODO: Map these properly
fn.dispatch_queue_create.no-implementor = true
fn.dispatch_queue_create_with_target.no-implementor = true
fn.dispatch_group_wait.no-implementor = true
fn.dispatch_semaphore_create.no-implementor = true
fn.dispatch_group_create.no-implementor = true
fn.dispatch_group_enter.no-implementor = true
fn.dispatch_queue_set_specific.no-implementor = true
fn.dispatch_workloop_create.no-implementor = true
fn.dispatch_workloop_set_autorelease_frequency.no-implementor = true

fn.dispatch_source_set_event_handler.renamed = "set_event_handler_block"
fn.dispatch_source_set_cancel_handler.renamed = "set_cancel_handler_block"
fn.dispatch_source_set_registration_handler.renamed = "set_registration_handler_block"
fn.dispatch_group_async.renamed = "async_block"
fn.dispatch_group_notify.renamed = "notify_block"

# fn.dispatch_once.renamed = "__dispatch_once_block"
# fn.dispatch_once_f.renamed = "__dispatch_once_f"
