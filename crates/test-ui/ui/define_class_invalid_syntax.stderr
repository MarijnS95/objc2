error: must specify the desired selector using `#[method(...)]` or `#[method_id(...)]`
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__extract_custom_attributes_inner` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: cannot specify the `method`/`method_id` attribute twice
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__extract_custom_attributes_inner` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: cannot specify the `method`/`method_id` attribute twice
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__extract_custom_attributes_inner` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected expression, found `}`
 --> ui/define_class_invalid_syntax.rs
  |
  |         }
  |         ^ expected expression

error: no rules expected `(`
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn test_pattern((a, b): (u32, i32)) {
  |                         ^ no rules expected this token in macro call
  |
  = note: while trying to match sequence start

error: unexpected end of macro invocation
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn test_self(self) {
  |                          ^ missing tokens in macro arguments
  |
note: while trying to match `:`
 --> $WORKSPACE/crates/objc2/src/macros/define_class.rs
  |
  |         $param:ident : $param_ty:ty $(, $($rest:tt)*)?
  |                      ^

error: no rules expected `(`
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | | );
  | |_^ no rules expected this token in macro call
  |
  = note: while trying to match end of macro
  = note: this error originates in the macro `$crate::__define_class_register_methods` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: no rules expected `(`
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | | );
  | |_^ no rules expected this token in macro call
  |
  = note: while trying to match end of macro
  = note: this error originates in the macro `$crate::__define_class_register_methods` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected identifier, found keyword `fn`
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn fn test_fn_fn() {}
  |            ^^ expected identifier, found keyword

error: missing parameters for function definition
  --> ui/define_class_invalid_syntax.rs
   |
   |         fn fn test_fn_fn() {}
   |              ^
   |
help: add a parameter list
   |
66 |         fn fn() test_fn_fn() {}
   |              ++

error: expected one of `->`, `<`, `where`, or `{`, found `test_fn_fn`
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn fn test_fn_fn() {}
  |               ^^^^^^^^^^ expected one of `->`, `<`, `where`, or `{`
  |
 ::: $WORKSPACE/crates/objc2/src/macros/define_class.rs
  |
  |         $_associated_item:item
  |         ---------------------- while parsing argument for this `item` macro fragment

error: expected one of `->`, `where`, or `{`, found `<eof>`
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn test_unfinished()
  |                            ^ expected one of `->`, `where`, or `{`
  |
 ::: $WORKSPACE/crates/objc2/src/macros/define_class.rs
  |
  |         $_associated_item:item
  |         ---------------------- while parsing argument for this `item` macro fragment

error: `#[method_id(alloc)]` is not supported. Use `#[method(alloc)]` and do the memory management yourself
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__define_class_invalid_selectors` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[method_id(retain)]` is not supported. Use `#[method(retain)]` and do the memory management yourself
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__define_class_invalid_selectors` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[method_id(release)]` is not supported. Use `#[method(release)]` and do the memory management yourself
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__define_class_invalid_selectors` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[method_id(autorelease)]` is not supported. Use `#[method(autorelease)]` and do the memory management yourself
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__define_class_invalid_selectors` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[method_id(dealloc)]` is not supported. Implement `Drop` for the type instead
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__define_class_invalid_selectors` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[method(dealloc)]` is not supported. Implement `Drop` for the type instead
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__define_class_invalid_selectors` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: an inner attribute is not permitted in this context
 --> ui/define_class_invalid_syntax.rs
  |
  |         #![doc = "inner_attribute"]
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files
  = note: outer attributes, like `#[test]`, annotate the item following them

error: expected an item keyword
 --> ui/define_class_invalid_syntax.rs
  |
  |         #![doc = "inner_attribute"]
  |                                   ^
  |
 ::: $WORKSPACE/crates/objc2/src/macros/define_class.rs
  |
  |         $_associated_item:item
  |         ---------------------- while parsing argument for this `item` macro fragment

error: must specify the desired selector using `#[method(...)]` or `#[method_id(...)]`
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__extract_custom_attributes_inner` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: cannot specify the `method`/`method_id` attribute twice
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__extract_custom_attributes_inner` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: cannot specify the `method`/`method_id` attribute twice
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__extract_custom_attributes_inner` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[method_id(...)]` must have a return type
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__define_class_method_out_inner` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: no rules expected `(`
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn test_pattern((a, b): (u32, i32)) {
  |                         ^ no rules expected this token in macro call
  |
note: while trying to match reserved identifier `_`
 --> $WORKSPACE/crates/objc2/src/macros/define_class.rs
  |
  |         (_ : $param_ty:ty $(, $($params_rest:tt)*)?)
  |          ^

error: no rules expected `)`
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | | );
  | |_^ no rules expected this token in macro call
  |
note: while trying to match `:`
 --> $WORKSPACE/crates/objc2/src/macros/define_class.rs
  |
  |         ($param:ident : $param_ty:ty $(, $($params_rest:tt)*)?)
  |                       ^
  = note: this error originates in the macro `$crate::__define_class_method_out` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: no rules expected keyword `pub`
 --> ui/define_class_invalid_syntax.rs
  |
  |         pub fn test_pub() {}
  |         ^^^ no rules expected this token in macro call
  |
note: while trying to match keyword `unsafe`
 --> $WORKSPACE/crates/objc2/src/macros/define_class.rs
  |
  |         unsafe fn $name:ident($($params:tt)*) $(-> $ret:ty)? $body:block
  |         ^^^^^^

error: no rules expected keyword `const`
 --> ui/define_class_invalid_syntax.rs
  |
  |         const fn test_const() {}
  |         ^^^^^ no rules expected this token in macro call
  |
note: while trying to match keyword `unsafe`
 --> $WORKSPACE/crates/objc2/src/macros/define_class.rs
  |
  |         unsafe fn $name:ident($($params:tt)*) $(-> $ret:ty)? $body:block
  |         ^^^^^^

error: no rules expected keyword `async`
 --> ui/define_class_invalid_syntax.rs
  |
  |         async fn test_async() {}
  |         ^^^^^ no rules expected this token in macro call
  |
note: while trying to match keyword `unsafe`
 --> $WORKSPACE/crates/objc2/src/macros/define_class.rs
  |
  |         unsafe fn $name:ident($($params:tt)*) $(-> $ret:ty)? $body:block
  |         ^^^^^^

error: no rules expected keyword `extern`
 --> ui/define_class_invalid_syntax.rs
  |
  |         extern "C" fn test_extern() {}
  |         ^^^^^^ no rules expected this token in macro call
  |
note: while trying to match keyword `unsafe`
 --> $WORKSPACE/crates/objc2/src/macros/define_class.rs
  |
  |         unsafe fn $name:ident($($params:tt)*) $(-> $ret:ty)? $body:block
  |         ^^^^^^

error: no rules expected `test_fn_fn`
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn fn test_fn_fn() {}
  |               ^^^^^^^^^^ no rules expected this token in macro call
  |
note: while trying to match `(`
 --> $WORKSPACE/crates/objc2/src/macros/define_class.rs
  |
  |         fn $name:ident($($params:tt)*) $(-> $ret:ty)? $body:block
  |                       ^

error: no rules expected `<`
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn test_generic<T>() {}
  |                        ^ no rules expected this token in macro call
  |
note: while trying to match `(`
 --> $WORKSPACE/crates/objc2/src/macros/define_class.rs
  |
  |         fn $name:ident($($params:tt)*) $(-> $ret:ty)? $body:block
  |                       ^

error: no rules expected `;`
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn test_no_body(&self);
  |                               ^ no rules expected this token in macro call
  |
note: while trying to match meta-variable `$body:block`
 --> $WORKSPACE/crates/objc2/src/macros/define_class.rs
  |
  |         fn $name:ident($($params:tt)*) $(-> $ret:ty)? $body:block
  |                                                       ^^^^^^^^^^^

error: unexpected end of macro invocation
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn test_unfinished()
  |                             ^ missing tokens in macro arguments
  |
note: while trying to match meta-variable `$body:block`
 --> $WORKSPACE/crates/objc2/src/macros/define_class.rs
  |
  |         fn $name:ident($($params:tt)*) $(-> $ret:ty)? $body:block
  |                                                       ^^^^^^^^^^^

error: no rules expected `!`
 --> ui/define_class_invalid_syntax.rs
  |
  |         #![doc = "inner_attribute"]
  |          ^ no rules expected this token in macro call
  |
note: while trying to match `[`
 --> $WORKSPACE/crates/objc2/src/macros/define_class.rs
  |
  |         $(#[$($m:tt)*])*
  |            ^

error: no rules expected keyword `type`
 --> ui/define_class_invalid_syntax.rs
  |
  |         type TypeAlias = Self;
  |         ^^^^ no rules expected this token in macro call
  |
  = note: while trying to match end of macro

error: no rules expected keyword `const`
 --> ui/define_class_invalid_syntax.rs
  |
  |         const CONSTANT: () = ();
  |         ^^^^^ no rules expected this token in macro call
  |
  = note: while trying to match end of macro

error: must set name of class with #[name = ...]
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct MissingName;
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__define_class_inner` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: must specify the superclass with #[unsafe(super(...))]
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[name = "MissingSuper"]
  | |     struct MissingSuper;
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__extern_class_check_super_unsafe` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: #[super(...)] must be wrapped in `unsafe`, as in #[unsafe(super(...))]
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[super(NSObject)]
  | |     #[name = "SafeSuper"]
  | |     struct SafeSuper;
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__extern_class_check_super_unsafe` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: must set name of class with #[name = ...]
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     struct MissingBoth;
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__define_class_inner` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: must specify the superclass with #[unsafe(super(...))]
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     struct MissingBoth;
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__extern_class_check_super_unsafe` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0692]: transparent struct cannot have other repr hints
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "HasRepr"]
  | |     #[repr(transparent)]
  | |            ^^^^^^^^^^^
  | |     struct HasRepr;
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__define_class_inner` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no function or associated item named `test_pattern` found for struct `InvalidMethodDeclarations` in the current scope
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | |         fn test_pattern((a, b): (u32, i32)) {
  | |            ^^^^^^^^^^^^ function or associated item not found in `InvalidMethodDeclarations`
... |
  | | );
  | |_- function or associated item `test_pattern` not found for this struct

error[E0599]: no function or associated item named `test_self` found for struct `InvalidMethodDeclarations` in the current scope
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | |         fn test_self(self) {
  | |            ^^^^^^^^^ function or associated item not found in `InvalidMethodDeclarations`
... |
  | | );
  | |_- function or associated item `test_self` not found for this struct

error[E0277]: the trait bound `MethodFamily<2>: MessageReceiveRetained<&AnyClass, Retained<InvalidMethodDeclarations>>` is not satisfied
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     #[name = "InvalidMethodDeclarations"]
  | |     struct InvalidMethodDeclarations;
... |
  | | );
  | |_^ the trait `MessageReceiveRetained<&AnyClass, Retained<InvalidMethodDeclarations>>` is not implemented for `MethodFamily<2>`
  |
  = help: the following other types implement trait `MessageReceiveRetained<Receiver, Ret>`:
            `MethodFamily<1>` implements `MessageReceiveRetained<Receiver, Ret>`
            `MethodFamily<3>` implements `MessageReceiveRetained<Allocated<T>, Ret>`
            `MethodFamily<4>` implements `MessageReceiveRetained<Receiver, Ret>`
            `MethodFamily<5>` implements `MessageReceiveRetained<Receiver, Ret>`
            `MethodFamily<6>` implements `MessageReceiveRetained<Receiver, Ret>`
  = note: this error originates in the macro `$crate::__define_class_method_out_inner` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)
