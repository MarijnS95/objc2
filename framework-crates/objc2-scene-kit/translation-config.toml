framework = "SceneKit"
crate = "objc2-scene-kit"
required-crates = ["objc2", "objc2-foundation"]
custom-lib-rs = true
macos = "10.8"
maccatalyst = "13.1"
ios = "8.0"
tvos = "9.0"
watchos = "3.0"
visionos = "1.0"

external.AVAudioEngine.module = "AVFAudio.AVAudioEngine"
external.AVAudioEnvironmentNode.module = "AVFAudio.AVAudioEnvironmentNode"
external.AVAudioNode.module = "AVFAudio.AVAudioNode"

# Both protocol and class
protocol.SCNAnimation.renamed = "SCNAnimationProtocol"

# Needs SpriteKit (potential recursion, unsure which framework should depend on which)
protocol.SCNSceneRenderer.methods."presentScene:withTransition:incomingPointOfView:completionHandler:".skipped = true
protocol.SCNSceneRenderer.methods."overlaySKScene".skipped = true
protocol.SCNSceneRenderer.methods."setOverlaySKScene:".skipped = true

# Needs JavaScriptCore
fn.SCNExportJavaScriptModule.skipped = true

# Needs ModelIO
class.SCNScene.methods."sceneWithMDLAsset:".skipped = true
class.MDLAsset.categories.SCNModelIO.skipped = true
class.SCNNode.methods."nodeWithMDLObject:".skipped = true
class.MDLObject.categories.SCNModelIO.skipped = true
class.SCNGeometry.methods."geometryWithMDLMesh:".skipped = true
class.MDLMesh.categories.SCNModelIO.skipped = true
class.SCNGeometryElement.methods."geometryElementWithMDLSubmesh:".skipped = true
class.MDLSubmesh.categories.SCNModelIO.skipped = true
class.SCNMaterial.methods."materialWithMDLMaterial:".skipped = true
class.MDLMaterial.categories.SCNModelIO.skipped = true
class.SCNLight.methods."lightWithMDLLight:".skipped = true
class.MDLLight.categories.SCNModelIO.skipped = true
class.SCNCamera.methods."cameraWithMDLCamera:".skipped = true
class.MDLCamera.categories.SCNModelIO.skipped = true

# Needs GLKVector3, GLKVector4 and GLKMatrix4 from GLKit
fn.SCNMatrix4ToGLKMatrix4.skipped = true
fn.SCNMatrix4FromGLKMatrix4.skipped = true
fn.SCNVector3FromGLKVector3.skipped = true
fn.SCNVector3ToGLKVector3.skipped = true
fn.SCNVector4FromGLKVector4.skipped = true
fn.SCNVector4ToGLKVector4.skipped = true

# Needs simd types
class.SCNHitTestResult.methods.simdLocalCoordinates.skipped = true
class.SCNHitTestResult.methods.simdWorldCoordinates.skipped = true
class.SCNHitTestResult.methods.simdLocalNormal.skipped = true
class.SCNHitTestResult.methods.simdWorldNormal.skipped = true
class.SCNHitTestResult.methods.simdModelTransform.skipped = true
class.SCNLight.methods.probeExtents.skipped = true
class.SCNLight.methods."setProbeExtents:".skipped = true
class.SCNLight.methods.probeOffset.skipped = true
class.SCNLight.methods."setProbeOffset:".skipped = true
class.SCNLight.methods.parallaxExtentsFactor.skipped = true
class.SCNLight.methods."setParallaxExtentsFactor:".skipped = true
class.SCNLight.methods.parallaxCenterOffset.skipped = true
class.SCNLight.methods."setParallaxCenterOffset:".skipped = true
class.SCNLight.methods.areaExtents.skipped = true
class.SCNLight.methods."setAreaExtents:".skipped = true
class.SCNNode.methods.simdTransform.skipped = true
class.SCNNode.methods."setSimdTransform:".skipped = true
class.SCNNode.methods.simdPosition.skipped = true
class.SCNNode.methods."setSimdPosition:".skipped = true
class.SCNNode.methods.simdRotation.skipped = true
class.SCNNode.methods."setSimdRotation:".skipped = true
class.SCNNode.methods.simdOrientation.skipped = true
class.SCNNode.methods."setSimdOrientation:".skipped = true
class.SCNNode.methods.simdEulerAngles.skipped = true
class.SCNNode.methods."setSimdEulerAngles:".skipped = true
class.SCNNode.methods.simdScale.skipped = true
class.SCNNode.methods."setSimdScale:".skipped = true
class.SCNNode.methods.simdPivot.skipped = true
class.SCNNode.methods."setSimdPivot:".skipped = true
class.SCNNode.methods.simdWorldPosition.skipped = true
class.SCNNode.methods."setSimdWorldPosition:".skipped = true
class.SCNNode.methods.simdWorldOrientation.skipped = true
class.SCNNode.methods."setSimdWorldOrientation:".skipped = true
class.SCNNode.methods.simdWorldTransform.skipped = true
class.SCNNode.methods."setSimdWorldTransform:".skipped = true
class.SCNNode.methods."simdConvertPosition:toNode:".skipped = true
class.SCNNode.methods."simdConvertPosition:fromNode:".skipped = true
class.SCNNode.methods."simdConvertVector:toNode:".skipped = true
class.SCNNode.methods."simdConvertVector:fromNode:".skipped = true
class.SCNNode.methods."simdConvertTransform:toNode:".skipped = true
class.SCNNode.methods."simdConvertTransform:fromNode:".skipped = true
class.SCNNode.methods.simdLocalUp.skipped = true
class.SCNNode.methods.simdLocalRight.skipped = true
class.SCNNode.methods.simdLocalFront.skipped = true
class.SCNNode.methods.simdWorldUp.skipped = true
class.SCNNode.methods.simdWorldRight.skipped = true
class.SCNNode.methods.simdWorldFront.skipped = true
class.SCNNode.methods."simdLookAt:".skipped = true
class.SCNNode.methods."simdLookAt:up:localFront:".skipped = true
class.SCNNode.methods."simdLocalTranslateBy:".skipped = true
class.SCNNode.methods."simdLocalRotateBy:".skipped = true
class.SCNNode.methods."simdRotateBy:aroundTarget:".skipped = true
fn.SCNVector3ToFloat3.skipped = true
fn.SCNVector4ToFloat4.skipped = true
fn.SCNMatrix4ToMat4.skipped = true
fn.SCNVector3FromFloat3.skipped = true
fn.SCNVector4FromFloat4.skipped = true
fn.SCNMatrix4FromMat4.skipped = true

# Needs CGLContextObj from OpenGL, and NSOpenGLContext from AppKit
class.SCNRenderer.methods."rendererWithContext:options:".skipped = true
class.SCNView.methods.openGLContext.skipped = true
class.SCNView.methods."setOpenGLContext:".skipped = true
class.SCNView.methods.pixelFormat.skipped = true
class.SCNView.methods."setPixelFormat:".skipped = true

# Needs dispatch_queue_t from libdispatch
class.SCNAction.methods."runBlock:queue:".skipped = true
