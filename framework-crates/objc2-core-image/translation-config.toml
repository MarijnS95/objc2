framework = "CoreImage"
crate = "objc2-core-image"
required-dependencies = ["objc2-foundation"]
macos = "10.11"
maccatalyst = "13.0"
ios = "5.0"
tvos = "9.0"
visionos = "1.0"

# CF_RETURNS_NOT_RETAINED
class.CIColor.methods.colorSpace.skipped = true
class.CIImage.methods.colorSpace.skipped = true

# CF_RETURNS_RETAINED
class.CIContext.methods."createCGLayerWithSize:info:".skipped = true
class.CIContext.methods."createCGImage:fromRect:".skipped = true
class.CIContext.methods."createCGImage:fromRect:format:colorSpace:".skipped = true
class.CIContext.methods."createCGImage:fromRect:format:colorSpace:deferred:".skipped = true

# Breaks usual conventions for errors, the return value is _not_ nullable, so
# the user must always check the error variable.
class.CIFilter.methods."filterArrayFromSerializedXMP:inputImageExtent:error:".skipped = true

# Both a protocol and a class, so we use Swift's naming scheme
protocol.CIFilter.renamed = "CIFilterProtocol"

# Needs AVFoundation
class.CIImage.categories.AVDepthData.skipped = true
class.CIImage.categories.AVPortraitEffectsMatte.skipped = true
class.CIImage.categories.AVSemanticSegmentationMatte.skipped = true

# Needs `IOSurfaceRef` from IOKit
class.CIRenderDestination.methods."initWithIOSurface:".skipped = true
protocol.CIImageProcessorInput.methods.surface.skipped = true
protocol.CIImageProcessorOutput.methods.surface.skipped = true
class.CIContext.methods."render:toIOSurface:bounds:colorSpace:".skipped = true
class.CIImage.methods."imageWithIOSurface:".skipped = true
class.CIImage.methods."imageWithIOSurface:options:".skipped = true
class.CIImage.methods."initWithIOSurface:".skipped = true
class.CIImage.methods."initWithIOSurface:options:".skipped = true
class.CIImage.methods."initWithIOSurface:plane:format:options:".skipped = true

# Needs `EAGLContext`
class.CIContext.methods."contextWithEAGLContext:".skipped = true
class.CIContext.methods."contextWithEAGLContext:options:".skipped = true

# Needs CGImagePropertyOrientation from ImageIO
class.CIContext.methods."depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:orientation:options:".skipped = true
class.CIContext.methods."depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:hairSemanticSegmentation:orientation:options:".skipped = true
class.CIContext.methods."depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:hairSemanticSegmentation:glassesMatte:gainMap:orientation:options:".skipped = true
class.CIImage.methods."imageTransformForOrientation:".skipped = true
class.CIImage.methods."imageByApplyingCGOrientation:".skipped = true
class.CIImage.methods."imageTransformForCGOrientation:".skipped = true
class.CIRAWFilter.methods.orientation.skipped = true
class.CIRAWFilter.methods."setOrientation:".skipped = true

# Needs CGImageSourceRef from ImageIO
class.CIImage.methods."imageWithCGImageSource:index:options:".skipped = true
class.CIImage.methods."initWithCGImageSource:index:options:".skipped = true

# Needs CGLContextObj from OpenGL
class.CIContext.methods."contextWithCGLContext:pixelFormat:colorSpace:options:".skipped = true
class.CIContext.methods."contextWithCGLContext:pixelFormat:options:".skipped = true
class.CIContext.methods."contextForOfflineGPUAtIndex:colorSpace:options:sharedContext:".skipped = true
